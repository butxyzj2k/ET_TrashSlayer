//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""d7bc79b2-943b-42c1-a533-702c97a73cde"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""3b7b904f-ff14-45cf-8750-805a3a653a6b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""2aea040a-5c25-49ad-b3e6-1a8659933dc7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseGame"",
                    ""type"": ""Button"",
                    ""id"": ""d1cc0c03-c912-4d52-9105-dc13f53b9cb5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""7d3122cb-d299-4cfd-b1b5-63e035ebf87f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""443fcb03-b1ca-4a49-a02a-355bf3cf6f1b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ea55f2f3-fb2e-49d8-82f7-a56196f27ca7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b2f5805b-1d31-4fb1-83ba-0368264da1ad"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7a95e733-e0c3-40e2-b688-b2f58afff351"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""afe0fd46-2911-441b-b483-de60d1c131ca"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e9b065b-96f8-49b6-8d2a-648159137585"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UICanvas"",
            ""id"": ""010987f4-fc57-473a-a0f2-8598f0b7573b"",
            ""actions"": [
                {
                    ""name"": ""UnPauseGame"",
                    ""type"": ""Button"",
                    ""id"": ""95746296-9073-446b-b06e-f9f36299e17e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0a47e694-3f59-42af-a7a7-8e1cb70defd3"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnPauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PauseCanvas"",
            ""id"": ""054777d2-a08c-4c77-9437-fe52e17c2d99"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""Timeline"",
            ""id"": ""77d02790-2dbf-4d15-9007-c74b4c6d42db"",
            ""actions"": [
                {
                    ""name"": ""SkipTimeline"",
                    ""type"": ""Button"",
                    ""id"": ""e04a9669-b899-4bda-84b3-e80c0ec48174"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0a1ba7d3-ff0e-4b79-b6bd-dd0acf26250b"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": ""Hold(duration=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipTimeline"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Attack = m_Player.FindAction("Attack", throwIfNotFound: true);
        m_Player_PauseGame = m_Player.FindAction("PauseGame", throwIfNotFound: true);
        // UICanvas
        m_UICanvas = asset.FindActionMap("UICanvas", throwIfNotFound: true);
        m_UICanvas_UnPauseGame = m_UICanvas.FindAction("UnPauseGame", throwIfNotFound: true);
        // PauseCanvas
        m_PauseCanvas = asset.FindActionMap("PauseCanvas", throwIfNotFound: true);
        // Timeline
        m_Timeline = asset.FindActionMap("Timeline", throwIfNotFound: true);
        m_Timeline_SkipTimeline = m_Timeline.FindAction("SkipTimeline", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Attack;
    private readonly InputAction m_Player_PauseGame;
    public struct PlayerActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Attack => m_Wrapper.m_Player_Attack;
        public InputAction @PauseGame => m_Wrapper.m_Player_PauseGame;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @PauseGame.started += instance.OnPauseGame;
            @PauseGame.performed += instance.OnPauseGame;
            @PauseGame.canceled += instance.OnPauseGame;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @PauseGame.started -= instance.OnPauseGame;
            @PauseGame.performed -= instance.OnPauseGame;
            @PauseGame.canceled -= instance.OnPauseGame;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // UICanvas
    private readonly InputActionMap m_UICanvas;
    private List<IUICanvasActions> m_UICanvasActionsCallbackInterfaces = new List<IUICanvasActions>();
    private readonly InputAction m_UICanvas_UnPauseGame;
    public struct UICanvasActions
    {
        private @PlayerInputAction m_Wrapper;
        public UICanvasActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @UnPauseGame => m_Wrapper.m_UICanvas_UnPauseGame;
        public InputActionMap Get() { return m_Wrapper.m_UICanvas; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UICanvasActions set) { return set.Get(); }
        public void AddCallbacks(IUICanvasActions instance)
        {
            if (instance == null || m_Wrapper.m_UICanvasActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UICanvasActionsCallbackInterfaces.Add(instance);
            @UnPauseGame.started += instance.OnUnPauseGame;
            @UnPauseGame.performed += instance.OnUnPauseGame;
            @UnPauseGame.canceled += instance.OnUnPauseGame;
        }

        private void UnregisterCallbacks(IUICanvasActions instance)
        {
            @UnPauseGame.started -= instance.OnUnPauseGame;
            @UnPauseGame.performed -= instance.OnUnPauseGame;
            @UnPauseGame.canceled -= instance.OnUnPauseGame;
        }

        public void RemoveCallbacks(IUICanvasActions instance)
        {
            if (m_Wrapper.m_UICanvasActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUICanvasActions instance)
        {
            foreach (var item in m_Wrapper.m_UICanvasActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UICanvasActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UICanvasActions @UICanvas => new UICanvasActions(this);

    // PauseCanvas
    private readonly InputActionMap m_PauseCanvas;
    private List<IPauseCanvasActions> m_PauseCanvasActionsCallbackInterfaces = new List<IPauseCanvasActions>();
    public struct PauseCanvasActions
    {
        private @PlayerInputAction m_Wrapper;
        public PauseCanvasActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_PauseCanvas; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseCanvasActions set) { return set.Get(); }
        public void AddCallbacks(IPauseCanvasActions instance)
        {
            if (instance == null || m_Wrapper.m_PauseCanvasActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PauseCanvasActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IPauseCanvasActions instance)
        {
        }

        public void RemoveCallbacks(IPauseCanvasActions instance)
        {
            if (m_Wrapper.m_PauseCanvasActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPauseCanvasActions instance)
        {
            foreach (var item in m_Wrapper.m_PauseCanvasActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PauseCanvasActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PauseCanvasActions @PauseCanvas => new PauseCanvasActions(this);

    // Timeline
    private readonly InputActionMap m_Timeline;
    private List<ITimelineActions> m_TimelineActionsCallbackInterfaces = new List<ITimelineActions>();
    private readonly InputAction m_Timeline_SkipTimeline;
    public struct TimelineActions
    {
        private @PlayerInputAction m_Wrapper;
        public TimelineActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @SkipTimeline => m_Wrapper.m_Timeline_SkipTimeline;
        public InputActionMap Get() { return m_Wrapper.m_Timeline; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TimelineActions set) { return set.Get(); }
        public void AddCallbacks(ITimelineActions instance)
        {
            if (instance == null || m_Wrapper.m_TimelineActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TimelineActionsCallbackInterfaces.Add(instance);
            @SkipTimeline.started += instance.OnSkipTimeline;
            @SkipTimeline.performed += instance.OnSkipTimeline;
            @SkipTimeline.canceled += instance.OnSkipTimeline;
        }

        private void UnregisterCallbacks(ITimelineActions instance)
        {
            @SkipTimeline.started -= instance.OnSkipTimeline;
            @SkipTimeline.performed -= instance.OnSkipTimeline;
            @SkipTimeline.canceled -= instance.OnSkipTimeline;
        }

        public void RemoveCallbacks(ITimelineActions instance)
        {
            if (m_Wrapper.m_TimelineActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITimelineActions instance)
        {
            foreach (var item in m_Wrapper.m_TimelineActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TimelineActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TimelineActions @Timeline => new TimelineActions(this);
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnPauseGame(InputAction.CallbackContext context);
    }
    public interface IUICanvasActions
    {
        void OnUnPauseGame(InputAction.CallbackContext context);
    }
    public interface IPauseCanvasActions
    {
    }
    public interface ITimelineActions
    {
        void OnSkipTimeline(InputAction.CallbackContext context);
    }
}
